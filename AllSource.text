// Bài tập môn Project I mã lớp 721013 kì 20221
// Giảng viên hướng dẫn: Thầy Đỗ Công Thuần
// Sinh viên thực hiện: Nguyễn Khánh Minh Đăng 20204720

// Các bài từ bài 2 đến bài 24 em sử dụng ngôn ngữ JavaScript (theo mặc định của web)
// Bài 2
function solution(n) {
    let result = 0;
    for(var i = 0;i<n;i++){
        result = result + 9 * 10**i;
    }
    return result;
}

// Bài 4
function solution(nCols, nRows, col, row) {
    return (nCols - col + 1) * (nRows - row);
}

// bài 6
function solution(n, firstNumber) {
    if(firstNumber < n/2)
    return firstNumber +  Math.floor(n/2);
    else return firstNumber - Math.floor(n/2);
}

// Bài 8
function solution(min1, min2_10, min11, s) {
    if(s < min1) return 0;
    else if(min1<= s && s< 9*min2_10)
        return 1 + Math.floor((s- min1)/min2_10);
    else 
        return 10 + Math.floor((s - min1 - 9*min2_10)/min11);
}

// Bài 10
function solution(value1, weight1, value2, weight2, maxW) {
    let maxWeight = weight1 > weight2 ? weight1 : weight2;
    let minWeight = weight1 < weight2 ? weight1 : weight2;
    let minWeightValue = minWeight == weight1 ? value1 : value2;
    let maxWeightValue = value1 + value2 - minWeightValue;
    if(maxW < minWeight) return 0;
    else if(minWeight <= maxW && maxW < maxWeight) return minWeightValue;
    else if(maxWeight <= maxW) {
        if(maxW <= 2 * minWeight) return value1 > value2 ? value1 : value2;
        else {
            return value1 + value2;
        }
    }
}

// Bài 12
function solution(a, b) {
   if(a >b ) return true;
   else {
       if( (b-a)%2==1) return true;
       else return false;
   }
}

// Bài 14
function solution(score1, score2) {
    let max = score1 > score2 ? score1 : score2;
    let min = score1 + score2 - max;
    return (max == 6 && min < 5) || (max ==7 && (min == 5 || min ==6)); 
}

// Bài 16
function solution(lastNumberOfDays) {
    if(lastNumberOfDays == 31){
        return [28,30,31];
    } else if(lastNumberOfDays == 30) return [31];
    else return [31];
}

// Bài 18
function solution(a) {
    var result = 0;
    for(let i =0;i<a.length;i++){
        result = result + a[i] * (256**i);
    }
    return result;
}

// Bài 20
function solution(a) {
    let aToBinary = [];
    while(a>0){
        aToBinary.push(a%2);
        a = Math.floor(a/2);
    }
    let rs = 0; 
    for(let i = 0;i<aToBinary.length;i++){
        rs += aToBinary[i] * 2**(aToBinary.length - 1 - i);
    }
    
    return rs;
}

// Bài 22
function solution(n) {
  return (function(input){
    let array = [...input.toString(2)];
    if(array.length % 2 != 0){
      array.unshift(0);
    }
    for(let i = array.length-1;i>=1;i-=2){
      let temp = array[i];
      array[i] = array[i-1];
      array[i-1] = temp;
    }
    let result = 0;
    for(let i = 0;i<array.length;i++){
      result = result + array[array.length - 1 -i] * 2**i;
    }
    return result;
  })(n);
}

// Bài 24
function solution(n, m) {
  return(function(n,m){
    let max = m > n ? m : n;
    let min = m + n - max;
    let maxArray = [...max.toString(2)];
    let minArray = [...min.toString(2)];
    while(minArray.length < maxArray.length){
      minArray.unshift('0');
    }
    console.log(minArray);
    console.log(maxArray)
    var i = minArray.length-1;
    while(minArray[i] != maxArray[i])
      i--;
      console.log(i)
    return 2**(minArray.length - i- 1);
  })(n,m);
}

// Các bài từ bài 26 trở đi em sử dụng ngôn ngữ C++(mặc định của web đề xuất)

// Bài 26
int solution(int n, int l, int r){
  int result = 0;
  for(int i=l; i<=r;i++){
    if(i<=n-i && l<=n-i && n-i<=r) result++;
  }
  return result;
}

// Bài 28
int solution(string commands) {
    int result = 0;
    int check = 0;
    for(int i=0;i<commands.length();i++){
        if(check==0 && commands[i] == 'A') {
            result++;
            continue;
        }
        if(check==0 && (commands[i]=='L' || commands[i]=='R')) {
            check =1;
            continue;
        }
        if(check == 1 && (commands[i]=='L' || commands[i]=='R')){
            check = 0;
            result++;
            continue;
        }
    }
    return result;
}

// Bài 30
int solution(int k) {
    int yellowApples = 0, redApples = 0;
    for(int i=1;i<=k;i++){
        if(i%2==0) yellowApples += i*i;
        else redApples += i*i;
    }
    return -redApples + yellowApples;
}

// Bài 32
int solution(int n) {
    int ten = 1;
    while(n>10){
        int digit = n%10;
        n/=10;
        if(digit>=5) n++;
        ten*=10;
    }
    return n*ten;
}

// Bài 34
int GCD(int n, int m){
    while(n!=m){
        if(n>m) {
            n = n-m;
        } else m = m-n;
    }
    return m;
}

int solution(int n, int m) {
   int gcd = GCD(n,m);
   return m + n - gcd + (gcd-1)*2; 
}


// Bài 36
vector<int> solution(vector<int> inputArray, int elemToReplace, int substitutionElem) {
    for(int i=0;i<inputArray.size();i++){
        if(inputArray[i] == elemToReplace){
            inputArray[i] = substitutionElem;
        }
    }
    return inputArray;
}

// Bài 38
vector<int> solution(vector<int> a, vector<int> b) {
    for(int i=0;i<b.size();i++){
        a.push_back(b[i]);
    }
    return a;
}

// Bài 40
bool solution(vector<int> arr) {
    int middle;
    if(arr.size()%2==0) 
    middle = arr[arr.size()/2] + arr[arr.size()/2-1];
    else middle = arr[arr.size()/2];
    if(arr[0] == arr[arr.size()-1] && arr[0]  == middle) return true;
    else return false;
}

// Bài 42
int solution(vector<int> statues) {
    int min = statues[0], max = statues[0];
    for(int i=0;i<statues.size();i++){
        if(statues[i]<min) min = statues[i];
        if(statues[i] > max) max = statues[i];
    }
    return max - min + 1 - statues.size();
}

// Bài 44
int solution(int n) {
    /* Suppose that n = firstNumber + (firstNumber + 1) + ... + (firstNumber +          secondNumber-1)*/
    if(n<3) return 0;
    int firstNumber = 1, result = 0;
    for(firstNumber = 1; firstNumber < n-1; firstNumber++){
        int check = sqrt((2*firstNumber-1)*(2*firstNumber-1) + 8*n);
        if(check*check == ((2*firstNumber-1)*(2*firstNumber-1) + 8*n)){
            result++;
        }
    }
    return result;
}

// Bài 46
int solution(int current, int numberOfDigits) {
    bool check=true;
    int sum = 0, currentNumber = current;
    while(check){
        sum=0;
        while(currentNumber>0){
            sum+=1;
            currentNumber/=10;
        }
        numberOfDigits -= sum;
        if(numberOfDigits<0) {
            check = false;
            return current-1;
        }
        current++;
        currentNumber = current;
    }
}

// Bài 48
vector<int> solution(int n) {
    vector<int> numberDivisors(n+1,2);
    numberDivisors[1]=1;
    vector<bool> check(n+1, true);
    for(int i=2;i<=n;i++){
            for(int j = i;j<=n;j+=i){
            if(j==i){
                continue;
            }
            check[j]= false;
            numberDivisors[j]++;
        
        }
        
    }

    vector<int> result(n+1,0);
    int max=0, numberMax=0;
    for(int i=2;i<n;i++){
        for(int j=i+1;j<=n;j++){
            if(numberDivisors[j]<numberDivisors[i]){
                result[j]++;
                if(result[j]>max) max = result[j];
            }
        }
    }
    for(int i=1;i<=n;i++){
        if(result[i]==max) numberMax++;
    }
    vector<int> result1;
    result1.push_back(max);
    result1.push_back(numberMax);
    return result1;
}

// Bài 50
int process(vector<string>& w) {
    int ans = 0;
    for (int i = 0; i < w[0].length(); i++)
    for (int j = 0; j < w[1].length(); j++) {
        if (w[0][i] == w[1][j]) {
            for (int k = j+2; k < w[1].length(); k++)
            for (int h = 0; h < w[2].length(); h++) {
                if (w[1][k] == w[2][h]) {
                    for (int x = h+2; x < w[2].length(); x++)
                    for (int y = 0; y < w[3].length(); y++) {
                        if (w[2][x] == w[3][y]) {
                            int width = k - j;
                            int height = x - h;
                            if (y - width >= 0 && i + height < w[0].length()) {
                                if (w[3][y - width] == w[0][i + height]){
                                    ans++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return ans;
}

int solution(vector<string> words) {
    sort(words.begin(), words.end());
    
    int cnt = 0;
    do {
        cnt += process(words);
    } while (next_permutation(words.begin(), words.end()));
    
    return cnt;
}


// Bài 52
string solution(string noun) {
    if(97 <= (int)noun[0] && (int)noun[0] <= 122) noun[0] = noun[0]-32;
    for(int i=1;i<noun.length();i++){
        if(65 <= (int)noun[i] && noun[i] <= 90){
            noun[i] = noun[i] + 32;
        }
    }
    return noun;
}

// Bài 54
bool solution(string inputString) {
   for(int i=0;i<inputString.length();i++){
        if(97<= inputString[i] && inputString[i] <= 122){
            inputString[i] -= 32;
        }
    }
    string checkRessult ="", checkRessultRevers = "";
    int length = inputString.length();
    for(int i=0;i<inputString.length()/2;i++){
     checkRessult+=inputString[i];   
     checkRessultRevers += inputString[length-i-1];
    }
    // cout << checkRessult << " " << checkRessultRevers;
    if(checkRessult == checkRessultRevers) return true;
    else return false;
}

// Bài 56
string solution(string startTag) {
    string result = "</";
    for(int i = 1;i<startTag.length();i++){
        if((65<=startTag[i] && startTag[i]<=90) || (97<=startTag[i] && startTag[i] <=122) || (48<= startTag[i] && startTag[i] <=57)){
                    result+=startTag[i];
        } else {
        break;
        }
    }
    result += ">";
    return result;
}

// Bài 58
bool solution(string filename1, string filename2) {
    int length1 = filename1.length(), length2 = filename2.length();
    string  s1 = filename1,s2 = filename2;
    for(int i = 0;i<length1;i++){
        filename1[i] = tolower(filename1[i]);
    }
    
    for(int i = 0;i<length2;i++){
        filename2[i] = tolower(filename2[i]);
    }
    
    return (s1<s2) != (filename1 <filename2);
}

// Bài 60
bool solution(string string1, string string2) {
    int length = string1.length();
    char checkString1[26], checkString2[26];
    for(int i=0;i<26;i++){
        checkString1[i] = '0';
        checkString2[i] = '0';
    }
    for(int i=0;i<string1.length();i++){
        if(checkString1[string1[i]-97] == '0' && checkString2[string2[i]-97] == '0'){
            checkString1[string1[i]-97] = string2[i];
            checkString2[string2[i]-97] = string1[i];
        } else {
            if(checkString1[string1[i] - 97] != string2[i] || checkString2[string2[i] -97] != string1[i]) return false;
        }
    }
    return true;
}

// Bài 62
void quickSort(int a[], int l, int r){
    int mid = a[(l+r)/2], i=l,j=r;
 
    while(i<=j){
        while(a[i] < mid) i++;
        while(a[j] > mid) j--;
        if(i <= j){
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
            i++;
            j--;
        }
    }
    if(i< r) quickSort(a,i,r);
    if(j>l) quickSort(a,l,j);
}

string toString(int abcd){
    int digitNumbers[10] = {0};
    while(abcd>0){
        int digit = abcd%10;
        digitNumbers[digit]++;
        abcd /= 10;
    }
    quickSort(digitNumbers, 0, 9);
    string result = "";
    for(int i=0;i<10;i++){
        if(digitNumbers[i] > 0) result += (char) (digitNumbers[i] + 48);
    }
    return result;
}

int solution(string s) {
    int letterNumbers[26] = {0}, numberDigit = s.length();
    for(int i=0;i<s.length();i++){
        letterNumbers[s[i]-97]++;
    }
    quickSort(letterNumbers, 0, 25);
    string sString = "";
    for(int i=0;i<26;i++){
        if(letterNumbers[i] >0) {
            sString += (char)(letterNumbers[i]+48);
        }
    }
    cout << "sString = " << sString << endl;
    int result;
    int min = sqrt(pow(10,numberDigit-1)), max = sqrt(pow(10, numberDigit)-1);
    for(int i=max;i>=min;i--){
        if(toString(i*i) == sString) return i*i; 
    }
    return -1;
}


// Bài 64
// lấy ra hình vuông đang xét
string toString(vector<vector<int>> matrix, int i, int j){
    string result = "";
    result += (char) (matrix[i][j] + 48);
    result += (char) (matrix[i][j+1] + 48);
    result += (char) (matrix[i+1][j+1] + 48);
    result += (char) (matrix[i+1][j] + 48);
    return result;
}

int solution(vector<vector<int>> matrix) {
    if(matrix.size()<2) return 0;
    if(matrix[0].size()<2) return 0;
    int result = 0;
    vector<string> checkDifferent;
    for(int i=0;i<matrix.size()-1;i++){
        for(int j=0;j<matrix[0].size()-1;j++){
            bool check = true;
            string currentSquare = toString(matrix, i,j);
            // kiểm tra hình vuông đang xét đã đưuọc duyệt hay chưa
            for(int k=0;k<checkDifferent.size();k++){
                if(checkDifferent[k] == currentSquare){
                    check = false;
                }
            }
            if(check){
                // đưa hình vuông chưa xét vào vector
                checkDifferent.push_back(currentSquare);
                result++;
            }
        }
    }
    return result;
}


// Bài 66

int checkFriend(vector<int> divisors, int i, int j){    
    int lastCheck = 0;
    for(int u = 0;u<divisors.size();u++){
        int currentCheck;
        if((i!= divisors[u] && j!=divisors[u] && i%divisors[u]!=0 && j%divisors[u] != 0) || (i%divisors[u]==0 && j%divisors[u] == 0)){
            currentCheck = 0;
        } else currentCheck = 1;
        lastCheck += currentCheck;
    }
    if(lastCheck==0) return j;
    else return -1;
}

int solution(vector<int> divisors, int k) {
    int result = 0;
    bool check[k+1];
    vector<int> clanArray = vector<int>(k,0);
    for(int i=0;i<=k;i++){
        check[i] = true;
    }
    for(int i=1;i<k;i++){
        for(int j = i+1; j<=k;j++){
            if(check[j])
            if(checkFriend( divisors, i, j) !=-1){
                cout << i << " " << j << ", ";
                check[i] = false;
                clanArray[i]++;
                check[j] = false;
            }
        }
    }
    for(int i=1;i<=k;i++){
        if(check[i]) result++;
    }
    for(int i=0;i<k;i++){
        if(clanArray[i]>0) result++;
    }
    return result;
}

// Bài 68
vector<string> solution(vector<string> inputArray) {
    int maxLength = inputArray[0].length();
    vector<string> result;
    for(int i=0;i<inputArray.size();i++){
        if(inputArray[i].length() > maxLength) maxLength = inputArray[i].length();
    }    
    for(int i=0;i<inputArray.size();i++){
        if(inputArray[i].length()==maxLength)
        result.push_back(inputArray[i]);
    }
    return result;
}

// Bài 70
bool solution(string s) {
    int numberDigits[26] = {0};
    for(int i=0;i<s.length()-1;i++){
       s[i] = tolower(s[i]);
       s[i+1] = tolower(s[i+1]);
       cout << (int) s[i] << " " << (int)s[i+1] << ", ";
       if(s[i+1] <= s[i]) return false;
    }
    return true;
}

// Bài 72
vector<string> solution(vector<string> picture) {
    int row = picture.size()+2, column = picture[0].length()+2;
    vector<string> result;
    string stringStar = "";
    for(int i=0;i<column;i++){
        stringStar += '*';
    }
    result.push_back(stringStar);
    for(int i=0;i<picture.size();i++){
        string currentString = '*' + picture[i] + '*';
        result.push_back(currentString);
    }
    result .push_back(stringStar);
    return result;     
}

// Bài 74
int solution(int maxLength, string text) {
    vector<string> words;
    int result = 0;
    string currentWord = "";
    for(int i=0;i<text.length();i++){
        if((65<=text[i] && text[i] <=90) || (97<=text[i] && text[i] <=122)){
            currentWord += text[i];
        } else if(text[i] == ' '){
            words.push_back(currentWord);
            currentWord = "";
        }
    }
    words.push_back(currentWord);
    for(int i=0;i<words.size();i++){
        cout << words[i] << " ";
        if(words[i].length()<=maxLength && words[i].compare("") !=0 ){
            result++;
        } 
    }
    return result;
}

// Bài 76
string solution(int number, int width) {
    string result = "";
    for(int i=0;i<width;i++){
        result += (char)(number%10 + 48);
        number /= 10;
    }
    int length = result.length();
    for(int i=0;i<length/2;i++){
        char temp = result[i];
        result[i] = result[length - 1 -i];
        result[length - 1 -i] = temp; 
    }
    return result;
}

// Bài 78
bool solution(string line) {
    int numberSharp = 0;
    string number = "", base = "";
    for(int i=0;i<line.length();i++){
        // đếm số dấu # trong string
        if(line[i] =='#'){
        numberSharp++;
        continue;
        }
        
        // lấy ra cơ số, dừng khi gặp dấu #
        if(numberSharp==0 && '0'<=line[i] && line[i] <='9'){
            base+=line[i];
        }
        
        // lấy ra phần số
        if(numberSharp==1){
         number += line[i];
        }
    }
    cout << base;
    // kiểm tra base hợp lệ
    if(base.length()==1){
        if(base[0]<'2' || base[0]>'9') return false;
    }
    if(base.length()==2){
        if(base[0]!='1' || base[1] <'0' || base[1]>'6') return false;
    }
    
    // Kiểm tra xem input có phải nguyên gạch dưới hay không
    if(numberSharp == 0){
    bool checkOnlyGachDuoi = false;
        for(int i=0;i<line.length();i++){
            if('0' <= line[i] && line[i]<='9') checkOnlyGachDuoi = true;
            if(('0' <= line[i] && line[i]<='9') || line[i]=='_')
            continue;
            else return false;
        }
    if(!checkOnlyGachDuoi) return false;
        
    }
    
    // nếu trong số ko có dấu # nào -> trường hợp 1, trả về true
    if(numberSharp==0) return true;
    // số dấu # ko hợp lệ -> false
    if(numberSharp!=2 && numberSharp!=0) return false;
    
    // cơ số là số nhỏ hơn 10
    if(base.length()==1){
        if(number.length()==0) return false;
        for(int i=0;i<number.length();i++){
            if('0'<=number[i] && number[i]<base[0])
            continue;
            else return false;
        }
    }
    if(base.length()==1) return true;
    
    // cơ số lớn hơn 10
    if(base.length()==2){
        
    }
    
    // kiểm tra cơ số hợp lệ
    int newBase = base[1] - '0';
    if(number.length()==0) return false;
    if(base[1]>'6' || base[0]!='1') return false;
    
    // kiểm tra phần số hợp lệ
    for(int i=0;i<number.length();i++){
        if(('0' <= number[i] && number[i]<='9') || ('a'<=number[i] && (int)number[i] < 97 + newBase) || ('A'<=number[i] && (int)number[i] < 65 + newBase) || number[i] =='_'){
            continue;
        } else return false;
    }
    
    return true;
}

// Bài 80
string solution(char symbol) {
    if(symbol == '1' || symbol == '3' || symbol == '5' || symbol == '7' || symbol == '9'){
        return "odd";
    } else if(symbol == '2' || symbol == '4' || symbol == '6' || symbol == '8' || symbol == '0') return "even";
    else return "not a digit";
}

// bài 82
vector<string> solution(char number) {
    string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int numberInt = number - 65;
    vector<string> result;
    for(int i=0;i<=numberInt/2;i++){
        string currentString = "";
        currentString = currentString +  alphabet[i] + " + " + alphabet[numberInt-i];
        result.push_back(currentString); 
    }    
    
    return result;
}

// Bài 84
string solution(string note) {
    string alphabet = "abcdefghij", result="";
    int  length = note.length(), checkTwoDot=0;    
    for(int i=0;i<length;i++){
        if('0'<=note[i] && note[i]<='9'){
            int index = note[i]-48;
            result += alphabet[index];
        } else if('a'<=note[i] && note[i]<='j'){
            int index = note[i]-97;
            result += (char)(index+48);
        } else result+=note[i];
    }
    return result;
}


// Bài 86
// chuyển số dạng string sang int
int convertStringToInt(string inputString){
    int k=0, result=0;
    for(int i=inputString.length()-1;i>=0;i--){
        int currentCharacter = inputString[i] - 48;
        result += currentCharacter*pow(10,k);
        k++;
    }
    return result;
}


string solution(string cipher) {
    string result = "", currentString = "";
    int index = 0;
    while(index<cipher.length()){
        currentString = "";
        // giải mã các chữ có mã >= 100
        if(cipher[index]=='1'){
            for(int i=0;i<3;i++){
                currentString += cipher[index+i];
            }
            
            int currentIndex = convertStringToInt(currentString);
            cout << currentIndex << " ";
            result += currentIndex;
            index+=3;
        } else { // giãi mã các chữ có mã <100
            for(int i=0;i<2;i++){
                currentString += cipher[index+i];
            }
            int currentIndex = convertStringToInt(currentString);
            cout << currentIndex << " ";
            result+= currentIndex;
            index+=2;
        }
    }
    return result;
}

// Bài 88
void print(vector<int> a){
    for(int i=0;i<a.size();i++){
        cout << a[i] << " ";
    }
    cout << endl;
}

int solution(vector<int> inputArray) {
    if(inputArray.size() == 1) return inputArray[0];
    int check = 1, i = 1;
    vector<int> current1, current2;
    current2 = inputArray;
    do{
        current1.clear();
        if(i%2==1){
           for(int i=1;i<current2.size();i += 2){
            int currentElement = current2[i] + current2[i-1];
            current1.push_back(currentElement);
            } 
        } else {
            for(int i=1;i<current2.size();i += 2){
            int currentElement = current2[i] * current2[i-1];
            current1.push_back(currentElement);
            } 
        }
        i++;
        print(current1);
        current2 = current1;
        if(current1.size()<=1) check = 0;
    } while(check);
    
    return current1[0];
}

// Bài 90
bool solution(vector<vector<int>> shoes) {
    int check = 0;
    if(shoes.size() %2 ==1) return false;
    for(int i = 0; i < shoes.size(); i++ ){
        for(int j = 0; j < shoes.size(); j++){
            if(j != i){
                if(shoes[i][0] + shoes[j][0] == 1 && shoes[i][1] == shoes[j][1]) {
                
                check++;    
                shoes[i][0] = -1;
                shoes[j][0] = -1;
                }
            }
        }
    }
    cout << check;
    if(check == shoes.size()/2){
        return true;
    } else return false;
}

// Bài 92
int check_string(string input1, string input2, string result){
    int length = input1.length();
    int check = 1;
    for(int i = 0; i <= length; i++){
        if(input1[i] == result[i] || input2[i] == result[i]){
            continue;
        } else check = 0;
    }
    return check;
}

int solution(vector<string> inputArray, string result) {
    int num = 0;
    int size = inputArray.size();
    int check[size + 1][size + 1];
    
    for(int i = 0; i <= size; i++){
        for(int j = 0; j <= size; j++){
            check[i][j] = 0;
        }
    }
    
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            if(i != j){
                    int current_check = check_string(inputArray[i], inputArray[j], result);
            check[i][j] = current_check;
            check[j][i] = current_check;
            num += current_check;
            }
        
        }
    }
    return num / 2;
}

// Bài 94
bool solution(string inputString, int l, int r) {
    inputString += " ";
    int check = 0;
    int length = inputString.length();
    for(int i = l + 1; i <= r+1; i++){
        cout << "length = " << length << endl;
        if(length % i == 0){
            int so_doan = length / i, index = i-1;
            // if(index < l ) continue;
            cout << so_doan << " " << index << endl;
            check = 0;
            for(int k = 0; k < so_doan; k++){
                cout << index << " " <<  inputString[index] << ", ";
                if(inputString[index] == ' '){
                    check++;
                }
                index += i;
            }
            cout << endl;
            if(check == so_doan)
            return true;
        }
    }
    return false;
}

// Bài 96
vector<string> solution(int levelNum, int levelHeight) {
    vector<string> result;
    string prototype = "";
    int length = 2 + levelHeight;
    for(int i = 1; i < levelNum; i++){
        length++;
    }

    
    // làm đầu cây thông
    for(int i = 0; i < length - 1; i++){
        prototype += ' ';
    }
    prototype += '*';
    result.push_back(prototype);
    result.push_back(prototype);
    string current = prototype;
    current[length - 2] = '*';
    current += '*';
    result.push_back(current);
    
    
    prototype[length] = '\0';
    prototype[length-1] = ' ';
    prototype[length] = ' ';
    cout << prototype.length();
    
    // làm thân cây thông
    prototype[length-1] = '*';
    int length_star = 2;
    for(int i = 0; i < levelNum; i++){
        int current_length_star = length_star;
        for(int j = 0; j < levelHeight; j++){
            current = prototype;
            for(int k = 0; k < current_length_star; k++){
                current[length - 2 -k] = '*';
                current += '*';
            }
            
            current_length_star++;
            result.push_back(current);
        }
        length_star++;
    }
    
    // làm chân cây thông
    int length_foot = (levelHeight % 2) ? levelHeight : (levelHeight + 1);
    length_foot = (length_foot - 1) / 2;
    for(int i = 0; i < length_foot; i++){
        prototype[length - 2 - i] = '*';
        prototype += '*';
    }
    for(int i = 0; i < levelNum; i++){
        result.push_back(prototype);
    }
    return result;
}


// Bài 98
vector<int> solution(vector<vector<int>> matrix, int column) {
    vector<int> result;
    for(int i = 0; i < matrix.size(); i++){
        result.push_back(matrix[i][column]);
    }
    return result;
}

// Bài 100
vector<vector<int>> solution(vector<vector<int>> matrix) {
    int row = matrix.size() - 1, column = matrix[0].size() - 1, temp;
    if(column % 2 ==0)
    for(int i = 0; i < column/2; i++){
       temp = matrix[i][i];
       matrix[i][i] = matrix[row - i][column - i];
       matrix[row - i][column - i] = temp;
       temp = matrix[row - i][i];
       matrix[row - i][i] = matrix[i][column - i];
       matrix[i][column - i] = temp;
    }
    else {
        for(int i = 0; i <= column/2; i++){
       temp = matrix[i][i];
       matrix[i][i] = matrix[row - i][column - i];
       matrix[row - i][column - i] = temp;
       temp = matrix[row - i][i];
       matrix[row - i][i] = matrix[i][column - i];
       matrix[i][column - i] = temp;
    }
    }
    return matrix;
}

// Bài 102
int solution(vector<vector<int>> matrix, int a, int b) {
    int result = 0;
    for(int i = 0; i < matrix[a].size(); i++){
        result += matrix[a][i];
    }
    
    for(int i = 0; i < matrix.size(); i++){
        result += matrix[i][b];
    }
    result -= matrix[a][b];
    return result;
}

// Bài 104

vector<vector<string>> solution(vector<vector<string>> formation, int k) {
    string temp;
    k = k % 6;
    for(int i = 0; i < k; i++){
        temp = formation[0][1];
        formation[0][1] = formation[1][2];
        formation[1][2] = formation[3][2];
        formation[3][2] = formation[2][1];
        formation[2][1] = formation[3][0];
        formation[3][0] = formation[1][0];
        formation[1][0] = temp;
    }
    return formation;
}


// Bài 106
bool checkRow(vector<vector<int>> grid){
    set<int> check;
    for(int i = 0; i < grid.size(); i++){
        check.clear();
        for(int j = 0; j < grid[0].size(); j++){
            check.insert(grid[i][j]);
        }
        if(check.size() != 9) return false;
    }
    return true;
}

bool checkCol(vector<vector<int>> grid){
    set<int> check;
    for(int j = 0; j < grid[0].size(); j++){
        check.clear();
        for(int i = 0; i < grid.size(); i++){
            check.insert(grid[i][j]);
        }
        if(check.size() != 9) return false;
    }
    return true;
}

bool check3x3(vector<vector<int>> grid){
    set<int> check;
    for(int i = 0; i < grid.size() - 3; i+=3){
        for(int j = 0; j < grid[0].size() - 3; j+=3){
            check.clear();
            check.insert(grid[i][j]);
            check.insert(grid[i][j+1]);
            check.insert(grid[i][j+2]);
            check.insert(grid[i+1][j]);
            check.insert(grid[i+1][j+1]);
            check.insert(grid[i+1][j+2]);
            check.insert(grid[i+2][j]);
            check.insert(grid[i+2][j+1]);
            check.insert(grid[i+2][j+2]);
            if(check.size() != 9) return false;
        }
    }
    return true;
}

bool solution(vector<vector<int>> grid) {
    if(checkRow(grid) && checkCol(grid) && check3x3(grid)) return true;
    else return false;
}


// Bài 108
vector<vector<int>> solution(vector<vector<int>> image) {
    vector<vector<int>> result;
    vector<int> element;
    for(int i = 0; i <= image.size() - 3; i++){
        element.clear();
        for(int j = 0; j <= image[0].size() - 3; j++){
        int sum = 0;
            sum += image[i][j] + image[i][j + 1] + image[i][j + 2] + image[i+1][j] + image[i+1][j+1] + image[i+1][j+2]+ image[i+2][j] + image[i+2][j+1] + image[i+2][j+2]; 
            cout << sum << " ";
        element.push_back(sum / 9);
        }
        cout << endl;
        result.push_back(element);
    }
    
    return result;
}

// Bài 112
bool solution(vector<vector<int>> evidences) {
    int check, answer;
    bool result = true;
    for(int i = 0; i < evidences[0].size(); i++){
        check = 0;
       for(int j = 0; j < evidences.size(); j++){
        int e = evidences[j][i];
           if(e != 0){
               if( check == 0) {
                   answer = e;
                   check = 1;
               }
               else if(e != answer) result =  false;
           }
       } 
    }
    return result;
}

// Bài 114
int partition(vector<int> &A, int L, int R, int indexPivot) {
    int pivot = A[indexPivot];
    swap(A[indexPivot], A[R]);
    int storeIndex = L;
    for(int i = L; i <= R-1; i++){
    if(A[i] < pivot){
    swap(A[storeIndex], A[i]);
    storeIndex++;
    }
    }
    swap(A[storeIndex], A[R]);
    return storeIndex;
}

void quickSort(vector<int> &A, int L, int R) {
    if(L < R){
    int index = (L + R)/2;
    index = partition(A, L, R, index);
    if(L < index)
    quickSort(A, L, index-1);
    if(index < R)
    quickSort(A, index+1, R);
    }
}

vector<int> solution(vector<int> shuffled) {
    int sum = 0, sum_index;
    for(int i = 0; i < shuffled.size(); i++){
        sum += shuffled[i];
    }
    for(int i = 0; i < shuffled.size(); i++){
        if(shuffled[i] == sum/2){
            sum_index = i;
            break;
        }
    }
    
    vector<int> result;
    for(int i = 0; i < shuffled.size(); i++){
        if(i != sum_index){
            result.push_back(shuffled[i]);
        }
    }
    quickSort(result, 0, result.size()-1);
    return result;
}

// Bài 116
vector<string> solution(vector<string> inputArray) {
    vector<int> length;
    for(int i = 0; i < inputArray.size(); i++){
        length.push_back(inputArray[i].length());
    }
    
    for(int i = 1; i < inputArray.size(); i++){
        int last = length[i];
        string last_string = inputArray[i];
        int k = i;
        while(k > 0 && length[k-1] > last){
            length[k] = length[k-1]; 
            inputArray[k] = inputArray[k-1];
            k--;
        }
        length[k] = last;
        inputArray[k] = last_string;
    }
    return inputArray;
}

// Bài 118
int solution(vector<int> a, vector<vector<int>> q) {
    // đưa các phần tử lớn nhất của a đến các vị trí được tính tổng nhiều nhất
    vector<int> num(a.size()), index(a.size());
    for(int i = 0; i < num.size(); i++){
        num[i] = 0;
        index[i] = i;
    }
    for(auto query: q){
        for(int i = query[0]; i <= query[1]; i++)
        num[i]++;
    }
    
    int size = num.size();
    for(int i = 1; i < size; i++){
        int last = a[i];
        int k = i;
        while(k > 0 && a[k-1] < last){
            a[k] = a[k-1];
            k--;
        } 
        a[k] = last;
    }
    for(int i = 1; i < size; i++){
        int last = num[i];
        int last_index = index[i];
        int k = i;
        while(k > 0 && num[k-1] < last){
            num[k] = num[k-1];
            index[k] = index[k-1];
            k--;
        } 
        num[k] = last;
        index[k] = last_index;
    }
    vector<int> result(size);

    for(int i = 0; i < size; i++){
        result[index[i]] = a[i];
    }
    int sum = 0;
    for(auto query: q){
        for(int i = query[0]; i <= query[1]; i++){
            sum += result[i];
        }
    }
    return sum;
}

// Bài 120
int difference(int a){
    int maxA = 0, minA = INT_MAX, digit;
    while(a>0){
        digit = a % 10;
        a /= 10;
        if(digit > maxA) maxA = digit;
        if(digit < minA) minA = digit;
    }
    return maxA - minA;
}

vector<int> solution(vector<int> a) {
    vector<int> dif;
    for(int i = 0; i < a.size(); i++){
        dif.push_back(difference(a[i]));

    }
    for(int i = 1; i < a.size(); i++){
        int lastA = a[i];
        int last = dif[i];
        int k = i;
        while(k > 0 && ( dif[k-1] >= last) ){
            dif[k] = dif[k-1];
            a[k] = a[k-1];
            k--;
        }
        a[k] = lastA;
        dif[k] = last;
    }
    for(int i = 0; i < a.size(); i++){

        cout << dif[i] << " ";
    }
    return a;
}

// Bài 122
bool solution(string bishop, string pawn) {
    int bishopx = bishop[0]- 97, bishopy = bishop[1] - 48; 
    int pawnx = pawn[0] - 97, pawny = pawn[1] - 48;
    
    if( abs(bishopx - pawnx) == abs(bishopy - pawny)) return true;
    return false;
}

// Bài 124
vector<string> solution(string bishop1, string bishop2) {
    int bishop1x = bishop1[0] - 97, bishop1y = bishop1[1] - 49; 
    int bishop2x = bishop2[0] - 97, bishop2y = bishop2[1] - 49;
    float a, b; // đường thẳng qua 2 quân tượng là y = ax+b
    vector<string> result;
    if(abs(bishop1x - bishop2x) == abs(bishop1y - bishop2y)){
        a = (float) (bishop1y - bishop2y) / (bishop1x - bishop2x);
        b = bishop1y - a * bishop1x;
        
        if(a > 0){
            int x = - b / a;
            if(0 <= x && x <= 7){
                bishop1x = x;
                bishop1y = 0;
                bishop2x = 7;
                bishop2y = 7 * a + b;
            } else {
                bishop1y = b;
                bishop1x = 0;
                bishop2y = 7;
                bishop2x = (7 - b) / a;
            }
        } else {
            int x  = - b / a;
            if(0 < x && x <= 7){
                bishop1x = x;
                bishop1y = 0;
                bishop2x = 0;
                bishop2y = b;
            } else {
                bishop1x = 7;
                bishop1y = 7 *a + b;
                bishop2y = 7;
                bishop2x = (7 - b) / a;
            }
        }
        bishop1[0] = bishop1x + 97;
        bishop1[1] = bishop1y + 49;
        bishop2[0] = bishop2x + 97;
        bishop2[1] = bishop2y + 49;
    }
    if(bishop1[0] < bishop2[0]){
        result.push_back(bishop1);
        result.push_back(bishop2);
    } else if(bishop1[0] > bishop2[0]){
        result.push_back(bishop2);
        result.push_back(bishop1);
    } else {
        if(bishop1[1] < bishop2[1]){
            result.push_back(bishop1);
            result.push_back(bishop2);
        } else {
            result.push_back(bishop2);
            result.push_back(bishop1);
        }
    }
    return result;
}

// Bài 132
bool checkHour(string input){
    if(input[0] == '0' || input[0] == '1'){
     if('0' <= input[1] && input[1] <= '9' ) return true;
     else return false;   
    } else if(input[0] == '2'){
        if('0' <= input[1] && input[1] <= '3') return true;
        else return false;
    } else return false;
}

bool checkMinute(string input){
    if('0' <= input[0] && input[0] <= '5'){
        if('0' <= input[1] && input[1] <= '9') return true;
        else return false;
    } else return false;
}
bool solution(string time) {
    if(time.length() != 5) return false;
    else{
        string hour = "";
        hour += time[0];
        hour += time[1];
        string minute = "";
        minute += time[3];
        minute += time[4];
        cout << hour << " " << minute;
        if(checkMinute(minute) && checkHour(hour)) return true;
        else return false;
    }
}

// Bài 136
int solution(int year, vector<int> daysOfTheWeek, vector<string> holidays) {
    vector<vector<int>> doomsdays = {
        {17, 21, 25},
        {16, 20, 24},
        {15, 19, 23},
        {18, 22}
    };
    int y = year % 10, x = (year / 10) % 10, century = year / 100;
    int doomsdayCentury, doomsday;
    for(int i = 0; i < 4; i++){
        for(int j = 0; j < doomsdays[i].size(); j++){
            if(doomsdays[i][j] == century){
                if(i==0) doomsdayCentury = 7;
                else if(i==1) doomsdayCentury = 2;
                else if(i==2) doomsdayCentury = 3;
                else doomsdayCentury = 6;
                break;
            }
        }
    }
    int a, b, c, d, e;
    a = (x * 10 + y) / 12;
    b = (x * 10 + y) % 12;
    c = b / 4;
    d = a + b + c;
    e = d % 7;
    doomsday = (e + doomsdayCentury) % 7;
    if(doomsday == 0) doomsday = 7;
    int newDoomsDay;
    if((2*x + y + 1) % 4 == 0){
        newDoomsDay = (doomsday + 2) % 7;
    } else newDoomsDay = (doomsday + 1) % 7;
    if(newDoomsDay == 0) newDoomsDay = 7;
    int result = 0, distance;
    for(auto holiday: holidays){
        int day = (holiday[3] - 48)*10 + (holiday[4] - 48);
        int month = (holiday[0] - 48)*10 + (holiday[1] - 48);
        
        if(month % 2 == 0){
            if(month != 2)
             distance = day - month;
            else {
                if((2*x + y + 1) % 4 == 0){
                    distance = day - 29; 
                } else distance = day - 28;
            }
            if(month < 5) distance += newDoomsDay;
            else distance += doomsday;
        } else if(month == 1){
            // tính thứ tháng 1 năm thường
            if((2*x + y + 1) % 4 == 0){
                 distance = day - 4;
            } else { // tháng 3 năm nhuận
                 distance = day - 3;
            }
            distance += newDoomsDay;
        } else if(month == 3){
             distance = day - 7;
             distance += newDoomsDay;
        } else if(month == 5){
             distance = day - 9;    
             distance += newDoomsDay;
        } else if(month == 7){
            distance = day - 11;
            distance = distance + doomsday;
        } else if(month == 9){
            distance = day - 5;
            distance = distance + doomsday;
        } else if(month == 11){
            distance = day - 7;
            distance = distance + doomsday;
        }
        if(distance < 0){
            while(distance < 0){
                distance += 7;
            }
        }
        distance = distance % 7;
        if(distance == 0) distance = 7;
        for(auto check: daysOfTheWeek){
            if(check == distance) {
              result++;
              break;  
            }
        }
    }

    return result;
}

// Bài 138
bool solution(std::string sentence) {
  std::regex regex("^[A-Z][^.?!]*[.?!]$");
  return std::regex_match(sentence, regex);
}


// Bài 148
string solution(string table, int row, int column) {
    int j = 0;
    for (int i = 0; i <= row;i++) {
        while (!(table[j] == '<' && table[j + 1] == 't' && table[j + 2] == 'r' && table[j + 3] == '>')) {
            j++;
        }
        j += 4;
    }
    if(j >= table.length()) return "No such cell";
    for (int i = 0; i <= column;i++) {
        while (!(table[j] == '<' && table[j + 1] == 't' && table[j + 2] == 'd' && table[j + 3] == '>')) {
            if(!(table[j] == '<' && table[j+1] == '/' && table[j+2] == 't' && table[j+3] == 'r' && table[j+4] == '>'))
            j++;
            else {
                return "No such cell";
            }
        }
        j += 4;
    }
    if(j >= table.length()) return "No such cell";
    cout << j;
    string result = "";
    while (table[j] != '<') {
        result += table[j];
        j++;
    }
    return result;
}

// Bài 152
int solution(string inputString) {
    int result = 0;
    for(int i = 0; i < inputString.length(); i++){
        if('0' <= inputString[i] && inputString[i] <= '9'){
            result++;
            i++;
            while('0' <= inputString[i] && inputString[i] <= '9') 
            i++;
        } else if(inputString[i] == '"'){
            result++;
            i++;
            while(inputString[i] != '"') i++;
            i++;
        }

        if(inputString[i] == 't' && inputString[i+1] == 'r' && inputString[i+2] == 'u' && inputString[i+3] == 'e'){
          result++;
        }
        if(inputString[i] == 'f' && inputString[i+1] == 'a' && inputString[i+2] == 'l' && inputString[i+3] == 's' && inputString[i+4] == 'e'){
          result++;
        }
    }
    
    return result;
    
}

